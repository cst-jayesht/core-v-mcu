..
   Copyright (c) 2023 OpenHW Group
   Copyright (c) 2024 CircuitSutra

   SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1

.. Level 1
   =======

   Level 2
   -------

   Level 3
   ~~~~~~~

   Level 4
   ^^^^^^^
.. _apb_event_control:

APB EVENT CONTROL
==================

The SOC Event Controller module serves as a centralized event management system for CORE-V-MCU.
It handles the routing and prioritization of events from peripherals to various destinations through configurable masks and an arbitration mechanism.

Features
--------
  - Support for multiple event sources:
      - Peripheral events (up to 256 configurable inputs, 160 currently implemented)
      - APB-generated events (up to 32 events, 8 currently implemented)
      - Low-speed clock events
  - Three configurable output event channels:
      - FC (Fabric Controller/Core Complex) events
      - CL (Cluster) events
      - PR (Peripheral) events
  - Event masking capability for each output channel
  - Timer event generation with selectable event sources
  - FIFO-based event buffering for each input event with FIFO overflow error reporting
  - Priority-based event arbitration

Block Architecture
------------------

.. figure:: apb_event_controller_block_diagram.png
   :name: APB_Event_Controller_Block_Diagram
   :align: center
   :alt:

   APB Event Controller Block Diagram

Event Processing Components
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The SOC Event Controller consists of several key components that work together to route and manage events throughout the system:
  - Event Queues: One queue, having queue size of 4, per event source to handle event detection and buffering
  - Event Arbiter: Prioritizes concurrent events from multiple sources using a parallel prefix arbitration algorithm with round-robin priority scheme
  - Event Masking: Configurable masking for each output channel (FC, CL, PR)
  - Timer Event Generator: Selectable event routing to timer outputs

Input event sources
~~~~~~~~~~~~~~~~~~~~
  - **Peripheral Events**
      - Up to 256 peripheral events can be configured, with 160 currently implemented
      - Each peripheral event is represented by a dedicated input signal (per_events_i[159:0])
      - These events are generated by various peripherals in the system - uDMA subsystem, eFPGA cluster, GPIO.
      - per_events_i[111:0] are used for uDMA events, per_events_i[127:112] are used for eFPGA cluster events and per_events_i[159:128] are used for GPIO events
  - **APB Events**
      - Up to 32 APB-generated events can be configured, with 8 currently implemented
      - APB events are generated through software writes to the EVENT CSR
      - Each bit in the EVENT CSR corresponds to an APB event source
  - **Low-Speed Clock Events**
      - Additional event source for low-speed clock detection(reference clock provided by the APB FLL IP)

The above 3 events sources combined result in 169 event sources.

  - The event sources are combined into a single input vector for processing by the event arbiter
  - The input event vector is a 169-bit vector, where each bit corresponds to an event source
  - In the vector the 0th bit corresponds to low speed clock event, 1:8 bits corresponds to APB events, 9:168 bits corresponds to peripheral events.

The below table shows the mapping of the event sources to the input vector:

   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | Input Event         | Event Id/bit   | Event Source          | Event Source Pin/bit  |  Description                         |
   +=====================+================+=======================+=======================+======================================+
   | low_speed_clk_i     | 0              | APB FLL               | ref_clk_i             | low-speed clock(ref_clk) from APB FLL|
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | APB Event 0         | 1              | EVENT                 | EVENT    [0]          | Software generated events through    |
   |                     |                |                       |                       | EVENT CSR's bit 0                    |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | APB Event 1         | 2              | EVENT                 | EVENT    [1]          | Software generated events through    |
   |                     |                |                       |                       | EVENT CSR's bit 1                    |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | APB Event 2         | 3              | EVENT                 | EVENT    [2]          | Software generated events through    |
   |                     |                |                       |                       | EVENT CSR's bit 2                    |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | APB Event 3         | 4              | EVENT                 | EVENT    [3]          | Software generated events through    |
   |                     |                |                       |                       | EVENT CSR's bit 3                    |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | APB Event 4         | 5              | EVENT                 | EVENT    [4]          | Software generated events through    |
   |                     |                |                       |                       | EVENT CSR's bit 4                    |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | APB Event 5         | 6              | EVENT                 | EVENT    [5]          | Software generated events through    |
   |                     |                |                       |                       | EVENT CSR's bit 5                    |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | APB Event 6         | 7              | EVENT                 | EVENT    [6]          | Software generated events through    |
   |                     |                |                       |                       | EVENT CSR's bit 6                    |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | APB Event 7         | 8              | EVENT                 | EVENT    [7]          | Software generated events through    |
   |                     |                |                       |                       | EVENT CSR's bit 7                    |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[0]     | 9              | uDMA Core             | rx_lin_events_o[0]    | RX channel events from uDMA UART 0   |
   |                     |                |                       |                       | coming through uDMA Core             |   
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[1]     | 10             | uDMA Core             | tx_lin_events_o[0]    | TX channel events from uDMA UART 0   |
   |                     |                |                       |                       | coming through uDMA Core             | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[2]     | 11             | uDMA UART 0           | rx_char_event_o       | RX event from uDMA UART 0            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[3]     | 12             | uDMA UART 0           | err_event_o           | Error event from uDMA UART 0         |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[4]     | 13             | uDMA Core             | rx_lin_events_o[1]    | RX channel events from uDMA UART 1   |
   |                     |                |                       |                       | coming through uDMA Core             |   
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[5]     | 14             | uDMA Core             | tx_lin_events_o[1]    | TX channel events from uDMA UART 1   |
   |                     |                |                       |                       | coming through uDMA Core             | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[6]     | 15             | uDMA UART 1           | rx_char_event_o       | RX event from uDMA UART 1            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[7]     | 16             | uDMA UART 1           | err_event_o           | Error event from uDMA UART 1         |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[8]     | 17             | uDMA Core             | rx_lin_events_o[2]    | RX channel events from QSPI 0        |
   |                     |                |                       |                       | coming through uDMA Core             |   
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[9]     | 18             | uDMA Core             | tx_lin_events_o[2]    | TX channel events from QSPI 0        |
   |                     |                |                       |                       | coming through uDMA Core             | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[10]    | 19             | uDMA Core             | tx_lin_events_o[4]    | TX channel command events from QSPI 0|
   |                     |                |                       |                       | coming through uDMA Core             | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[11]    | 20             | uDMA QSPI 0           | spi_eot_o             | End of transmission event from QSPI 0|
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[12]    | 21             | uDMA Core             | rx_lin_events_o[3]    | RX channel events from QSPI 1        |
   |                     |                |                       |                       | coming through uDMA Core             |   
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[13]    | 22             | uDMA Core             | tx_lin_events_o[3]    | TX channel events from QSPI 1        |
   |                     |                |                       |                       | coming through uDMA Core             | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[14]    | 23             | uDMA Core             | tx_lin_events_o[5]    | TX channel command events from QSPI 1|
   |                     |                |                       |                       | coming through uDMA Core             | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[15]    | 24             | uDMA QSPI 1           | spi_eot_o             | End of transmission event from QSPI 1|
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[16]    | 25             | uDMA Core             | rx_lin_events_o[4]    | RX channel events from I2C Master 0  |
   |                     |                |                       |                       | coming through uDMA Core             |   
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[17]    | 26             | uDMA Core             | tx_lin_events_o[6]    | TX channel events from I2C Master 0  |
   |                     |                |                       |                       | coming through uDMA Core             | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[18]    | 27             | -                     | -                     | Always 0 in current implementation   |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[19]    | 28             | -                     | -                     | Always 0 in current implementation   |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[20]    | 29             | uDMA Core             | rx_lin_events_o[5]    | RX channel events from I2C Master 1  |
   |                     |                |                       |                       | coming through uDMA Core             |   
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[21]    | 30             | uDMA Core             | tx_lin_events_o[7]    | TX channel events from I2C Master 1  |
   |                     |                |                       |                       | coming through uDMA Core             | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[22]    | 31             | -                     | -                     | Always 0 in current implementation   | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[23]    | 32             | -                     | -                     | Always 0 in current implementation   | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[24]    | 33             | uDMA Core             | rx_lin_events_o[6]    | RX channel events from uDMA SDIO     |
   |                     |                |                       |                       | coming through uDMA Core             |   
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[25]    | 34             | uDMA Core             | tx_lin_events_o[8]    | TX channel events from uDMA SDIO     |
   |                     |                |                       |                       | coming through uDMA Core             | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[26]    | 35             | uDMA SDIO             | eot_o                 | End of transmission event from SDIO  | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[27]    | 36             | uDMA SDIO             | err_o                 | Error event from SDIO                | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[28]    | 37             | uDMA Core             | rx_lin_events_o[7]    | RX channel events from uDMA CAM      |
   |                     |                |                       |                       | coming through uDMA Core             |   
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[29]    | 38             | -                     | -                     | Always 0 in current implementation   | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[30]    | 39             | -                     | -                     | Always 0 in current implementation   | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[31]    | 40             | -                     | -                     | Always 0 in current implementation   | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[32]    | 41             | uDMA Filter           | eot_event_o           | End of transmission event from Filter|   
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[33]    | 42             | uDMA Filter           | act_event_o           | Activation event from Filter         | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[34]    | 43             | -                     | -                     | Always 0 in current implementation   | 
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+
   | per_events_i[35]    | 44             | -                     | -                     | Always 0 in current implementation   |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[112]   | 121            | eFPGA subsystem       | efpga_events_o[0]     | eFPGA output event pin 0             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[113]   | 122            | eFPGA subsystem       | efpga_events_o[1]     | eFPGA output event pin 1             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[114]   | 123            | eFPGA subsystem       | efpga_events_o[2]     | eFPGA output event pin 2             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[115]   | 124            | eFPGA subsystem       | efpga_events_o[3]     | eFPGA output event pin 3             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[116]   | 125            | eFPGA subsystem       | efpga_events_o[4]     | eFPGA output event pin 4             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[117]   | 126            | eFPGA subsystem       | efpga_events_o[5]     | eFPGA output event pin 5             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[118]   | 127            | eFPGA subsystem       | efpga_events_o[6]     | eFPGA output event pin 6             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[119]   | 128            | eFPGA subsystem       | efpga_events_o[7]     | eFPGA output event pin 7             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[120]   | 129            | eFPGA subsystem       | efpga_events_o[8]     | eFPGA output event pin 8             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[121]   | 130            | eFPGA subsystem       | efpga_events_o[9]     | eFPGA output event pin 9             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[122]   | 131            | eFPGA subsystem       | efpga_events_o[10]    | eFPGA output event pin 10            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[123]   | 132            | eFPGA subsystem       | efpga_events_o[11]    | eFPGA output event pin 11            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[124]   | 133            | eFPGA subsystem       | efpga_events_o[12]    | eFPGA output event pin 12            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[125]   | 134            | eFPGA subsystem       | efpga_events_o[13]    | eFPGA output event pin 13            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[126]   | 135            | eFPGA subsystem       | efpga_events_o[14]    | eFPGA output event pin 14            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[127]   | 136            | eFPGA subsystem       | efpga_events_o[15]    | eFPGA output event pin 15            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[128]   | 137            | APB GPIO              | interrupt[0]          | Interrupt for GPIO pin 0             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[129]   | 138            | APB GPIO              | interrupt[1]          | Interrupt for GPIO pin 1             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[130]   | 139            | APB GPIO              | interrupt[2]          | Interrupt for GPIO pin 2             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[131]   | 140            | APB GPIO              | interrupt[3]          | Interrupt for GPIO pin 3             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[132]   | 141            | APB GPIO              | interrupt[4]          | Interrupt for GPIO pin 4             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[133]   | 142            | APB GPIO              | interrupt[5]          | Interrupt for GPIO pin 5             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[134]   | 143            | APB GPIO              | interrupt[6]          | Interrupt for GPIO pin 6             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[135]   | 144            | APB GPIO              | interrupt[7]          | Interrupt for GPIO pin 7             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[136]   | 145            | APB GPIO              | interrupt[8]          | Interrupt for GPIO pin 8             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[137]   | 146            | APB GPIO              | interrupt[9]          | Interrupt for GPIO pin 9             |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[138]   | 147            | APB GPIO              | interrupt[10]         | Interrupt for GPIO pin 10            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[139]   | 148            | APB GPIO              | interrupt[11]         | Interrupt for GPIO pin 11            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[140]   | 149            | APB GPIO              | interrupt[12]         | Interrupt for GPIO pin 12            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[141]   | 150            | APB GPIO              | interrupt[13]         | Interrupt for GPIO pin 13            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[142]   | 151            | APB GPIO              | interrupt[14]         | Interrupt for GPIO pin 14            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[143]   | 152            | APB GPIO              | interrupt[15]         | Interrupt for GPIO pin 15            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[144]   | 153            | APB GPIO              | interrupt[16]         | Interrupt for GPIO pin 16            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[145]   | 153            | APB GPIO              | interrupt[17]         | Interrupt for GPIO pin 17            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[146]   | 153            | APB GPIO              | interrupt[18]         | Interrupt for GPIO pin 18            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[147]   | 153            | APB GPIO              | interrupt[19]         | Interrupt for GPIO pin 19            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[148]   | 153            | APB GPIO              | interrupt[20]         | Interrupt for GPIO pin 20            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[149]   | 153            | APB GPIO              | interrupt[21]         | Interrupt for GPIO pin 21            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[150]   | 153            | APB GPIO              | interrupt[22]         | Interrupt for GPIO pin 22            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[151]   | 153            | APB GPIO              | interrupt[23]         | Interrupt for GPIO pin 23            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[152]   | 153            | APB GPIO              | interrupt[24]         | Interrupt for GPIO pin 24            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[153]   | 153            | APB GPIO              | interrupt[25]         | Interrupt for GPIO pin 25            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[154]   | 153            | APB GPIO              | interrupt[26]         | Interrupt for GPIO pin 26            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[155]   | 153            | APB GPIO              | interrupt[27]         | Interrupt for GPIO pin 27            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[156]   | 153            | APB GPIO              | interrupt[28]         | Interrupt for GPIO pin 28            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[157]   | 153            | APB GPIO              | interrupt[29]         | Interrupt for GPIO pin 29            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[158]   | 153            | APB GPIO              | interrupt[30]         | Interrupt for GPIO pin 30            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+ 
   | per_events_i[159]   | 153            | APB GPIO              | interrupt[31]         | Interrupt for GPIO pin 31            |
   +---------------------+----------------+-----------------------+-----------------------+--------------------------------------+

Note: per_events_i[36:111] are not used in current implementation and are not connected anywhere thereby being in an undefined state.

Event Queues
~~~~~~~~~~~~
  - Each of the 169 event source has a dedicated queue
  - Whenever an input event is received, the corresponding queue captures the event
  - The events are popped from the queue when the arbiter grants the event for processing
  - Each queue can hold up to 4 events before overflow occurs
  - The queue reports errors when it overflows resulting in missed events
  - The ERR_* registrers are used to report the overflow errors

Event arbiter
~~~~~~~~~~~~~
The SOC Event Controller uses a sophisticated parallel prefix arbitration scheme to efficiently handle multiple simultaneous event requests.

**Key features of the arbiter include:**
  - Round-Robin Priority: The arbiter implements a round-robin priority scheme to ensure fair servicing of event requests over time
  - Parallel Prefix Algorithm: Uses a logarithmic-depth parallel prefix network to determine the highest priority request
  - Priority Rotation: After granting an event, the priority shifts to the next position in a circular manner to maintain fairness
  - Grant Acknowledgment: Uses a grant_ack signal to confirm event processing before updating priorities

Parallel Prefix Algorithm
^^^^^^^^^^^^^^^^^^^^^^^^^

The parallel prefix algorithm is a technique used to efficiently solve problems that can be expressed as a series of operations applied to a sequence of elements.
In the context of the arbiter, it's used to determine which request should be granted priority based on the current priority vector.
Here's how it works in this arbiter:

  - **Initial Setup**: The arbiter has a one-hot priority vector (a vector of size equal to total number of input events i.e. 160, out of which only one position is high, rest all are low) that indicates which request has the highest priority in the current arbitration cycle.
      - By default, when the arbiter starts, the first event in the vector is set to high, indicating it has the highest priority.
  - **Prefix Computation**: The algorithm computes "generate"(g) and "propagate"(p) vectors through multiple levels of logic:
      - Initially, the one-hot priority vector is loaded into the first generate level (g[0])
      - The inverted request vector (with circular shift) is loaded into the first propagate level (p[0])
  - **Propagation Through Levels**: Through log₂(EVNT_NUM) levels of computation(EVENT_NUM is the total number of input events, 169 in this case), the algorithm effectively checks:
      - Which requests are active, i.e. present in the current request vector(provided by the event queues)
      - Which request has the highest priority according to the current one-hot priority vector
      - Handles the circular nature of round-robin priority
  - **Final Decision**: At the last level, the algorithm cpmutes the vector (g) where only the highest priority active request has its corresponding bit set.
  - **Output Generation**: The final grant output is calculated in which the arbiter checks the g vector and generates the grant signal for the highest priority request i.e. in the output only the event which is granted is high, rest all are low.
  - **Grant Acknowledgment**: The arbiter waits for an acknowledgment signal for the granted event, which can come from any of the output channels, before proceeding to the next arbitration cycle

Round-Robin Priority scheme
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The round-robin priority scheme is a method used to ensure that all event sources are treated fairly and given equal opportunity to be serviced by the arbiter. 
The round-robin priority schemes is used to maintain the one-hot priority vector in the arbiter.
Here's how it works:

  - **Current Priority Vector**: At any given time, the one-hot vector indicates which request position has the highest priority.
  - **Selection Process**: When multiple input events are present, the one closest to (or at) the current priority position in a circular manner is granted.
  - **Priority Update**: After a grant is issued and acknowledged, the priority is updated by shifting the grant vector one position left (with wrap-around, circular shift).
  - **Movement Condition**: The priority updates only when:
      - At least one request was granted
      - The controller has acknowledged the grant

This ensures that after a request at position i is served, the request at position i+1 (or the next active request after it in a circular manner) will have the highest priority in the next arbitration cycle, effectively implementing a "round-robin" service pattern.

Round-Robin and Parallel Prefix Relationship
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The round-robin priority scheme and parallel prefix algorithm are related but serve different purposes in this arbiter:
  - The round-robin scheme defines the policy for updating priority after each grant-ack, ensuring fairness over time.
  - The parallel prefix algorithm is the implementation technique that efficiently applies this policy to determine which request to grant at each cycle.

Arbitration Process
^^^^^^^^^^^^^^^^^^^

Based on the above features of the arbiter, the arbitration process can be summarized as follows:
  - The arbiter receives request signals from all event sources.
  - The event arbitration logic ensures only one event is processed at a time across all input sources.
  - Using the current priority pointer, it determines which request to grant
  - The parallel prefix network efficiently resolves priority in multiple stages
  - Once a grant is issued, the arbiter waits for acknowledgment
  - The acknowledgment signal can come from any of the output channels (FC, CL, PR)
  - The arbiter checks the acknowledgment signal to confirm that the granted event has been processed
  - After acknowledgment, the priority pointer rotates to the next position

Event Masking
~~~~~~~~~~~~~
  - The event controller provides configurable masking for each output channel (FC, CL, PR) to control which events are routed to the respective channels.
  - The masking is done using 8 32-bit mask CSRs for each of the 3 output channels(FC, CL, PR), where each bit corresponds to an event source.
  - The mask bits are active high, meaning:
      - 1 = Masked/Blocked (event will not be routed)
      - 0 = Enabled (event will be routed)
  - By default, all mask bits are set to 1 (masked), meaning no events are routed until explicitly configured.
  - When an output is granted and an output channel is ready, the event is routed only if the corresponding mask bit is 0 (unmasked) in the respective channel's mask CSR.
  - For example, let's say that an event from the GPIO peripheral needs to be routed to the cluster(eFPGA) channel, then the respective mask bit in the CL_MASK_* CSR must be set to 0 (unmasked) for that event ID and it should be set to 1 (masked) in the FC_MASK_* and PR_MASK_* CSRs to prevent routing to those channels.

Output Event Processing
~~~~~~~~~~~~~~~~~~~~~~~

The **Event Controller** handles the distribution of system events via three dedicated output channels. Each channel is independently managed and can receive any of the 169 input events, depending on configuration and runtime conditions.
Each event is broadcasted to all channels simultaneously, a channel can ignore the event by masking the event using channel mask CSR.

Output Channels Overview
^^^^^^^^^^^^^^^^^^^^^^^^

- **FC Channel (Fabric Controller / Core Complex):**

FC Channel is responsible to communicate events to the Fabric Controller.
The APB event controller use following approach to notify events to the Fabric Controller:

  - Pin based high priority event notification: Routes high-priority events to the Fabric Controller through fc_events_o pin. This feature is not implemented in the current version hence out of scope for this manual.
  - FIFO based event notification: Events are accumulated in FIFO and event_fifo_valid_o signal is raised to notify events to Fabric Controller. 

Whenever a valid event is present for FC channel, it is pushed onto the FC FIFO. The FC FIFO is a 4-entry queue that holds events until they are read by the Fabric Controller.
When an event is available is the FC FIFO, the APB event controller raises event_fifo_valid_o signal to the Fabric Controller. In response to the signal,  Fabric Controller can read the event ID through the FIFO CSR.
Once the event is read, the Fabric Controller can acknowledge it by asserting ``core_irq_ack_i = 1`` and setting ``core_irq_ack_id_i = 11``.
The event is then popped from the FC FIFO and next event is placed on the FIFO CSR.
The event_fifo_valid_o signal is deasserted once the FC FIFO is empty.

- **CL Channel (Cluster / eFPGA):**
    - Intended for routing events to the cluster or eFPGA logic. *(Note: not connected in current implementation)*
    - Uses ``cl_event_data_o`` to send event IDs to the eFPGA subsystem.
    - Uses ``cl_event_ready_i`` to check readiness for event processing, ensuring the eFPGA is ready to accept events.
    - Uses ``cl_event_valid_o`` to signal that a valid event ID is available for processing.

- **PR Channel (Peripheral):**
    - Used to forward events to **uDMA subsystem**.
    - Uses ``pr_event_data_o`` to send event IDs to the uDMA subsystem.
    - Uses ``pr_event_ready_i`` to check readiness for event processing, ensuring the uDMA subsystem is ready to accept events.
    - Uses ``pr_event_valid_o`` to signal that a valid event ID is available for processing.


Event Routing Process
^^^^^^^^^^^^^^^^^^^^^

The output routing for incoming events follows the steps below:

1. **Event Queueing:**
   - All incoming events (169 in total) are first captured and stored in their respective queue inside the Event Controller.

2. **Arbitration:**
   - An internal **arbiter** evaluates all queued events.
   - Based on priority, the arbiter selects and **grants** one event for output processing.

3. **Event ID Placement on Output Channels:**
   - The **event ID** (based on its position in the input event vector) is provisionally placed on:

      - ``cl_event_data_o`` (eFPGA subsystem)
      - ``pr_event_data_o`` (uDMA subsystem)
      - FC FIFO (if space is available and the event is not masked)

4. **Mask Register Evaluation:**
   - The event is checked against the **MASK CSRs** of each output channel:

      - ``FC_MASK_*``, ``CL_MASK_*``, and ``PR_MASK_*``

   - If the event is **masked for all output channels**, it is **popped** and **discarded** from the queue. The controller proceeds to the next event.

5. **Output Channel Readiness Check:**
   - For each output channel where the event is **unmasked**, the controller checks if the corresponding channel is **ready**:

      - ``pr_event_ready_i`` for PR channel
      - ``cl_event_ready_i`` for CL channel
      - **FC Channel:** Ready if FIFO is not full

6. **Valid Signal Assertion:**
   - If the event is **unmasked and granted**, the corresponding **valid signal** for that output channel is asserted.
   - This signals that the output channel may process the event ID.

7. **Event Dequeueing (Pop):**
   - If any valid output channel has accepted the event, it is **popped** from the event queue.

FC FIFO
~~~~~~~

The FC FIFO is a 4-entry queue, housed within the APB event controller, that holds events until they are read by the Fabric Controller. The FIFO is used to buffer events for the FC channel, allowing the controller to manage event flow efficiently.
The FIFO is 8 bits wide and holds the event ID of the event that is being routed to the Fabric Controller.

Push operation
^^^^^^^^^^^^^^
  - When an event is granted for the FC channel and the FIFO has available space, the event ID is pushed into the FC FIFO.
  - The FIFO indicates that it has available space by asserting the grant_o signal. The grant_o is an internal signal and is not visible outside the APB event controller.
  - When the FIFO is full, the grant_o signal is deasserted, indicating that no more events can be pushed into the FIFO until space becomes available.

Pop Operation
^^^^^^^^^^^^^
  - The FIFO valid signal ``event_fifo_valid_o`` is asserted when there is at least one event in the FIFO, indicating that the Fabric Controller can read the event.
  - The events on the top of the FIFO can be read by the Fabric Controller through the FIFO CSR.
  - The Fabric Controller reads the event ID from the FIFO CSR and acknowledges the event by asserting ``core_irq_ack_i = 1`` and setting ``core_irq_ack_id_i = 11``.
  - Once the event is acknowledged, it is popped from the FIFO, and the next event (if any) is placed on the FIFO CSR.
  - If the FIFO was full before the pop operation, the FIFO will now have space available, and the grant_o signal will be asserted again.
  - The ``event_fifo_valid_o`` signal is deasserted when the FIFO is empty, indicating that there are no more events to read.

Example: Routing a uDMA UART RX Event (Event ID 15) to Core Complex
-------------------------------------------------------------------

Let’s walk through an example where a **UART peripheral receives data**, triggering a **uDMA RX event** which needs to be routed to the Fabric Controller (FC) for processing:

**Source Event:**

- **uDMA UART RX Event**
- **Event ID:** 15
- **Input Pin:** ``per_events_i[6]``

Event Routing Flow:

1. **Event Detection:**
    - ``per_events_i[6]`` is asserted, triggering internal event ID 15.

2. **Event Queueing and Arbitration:**
    - Event 15 is captured and queued by the controller.
    - The arbiter processes all the available input events in the top of the 169 input event queues and eventually grants event 15(uDMA RX event) for output.

3. **Mask Evaluation:**
    - ``FC_MASK_0``'s bit 15 is cleared (unmasked), meaning it is valid for the FC channel.
    - ``PR_MASK_0``'s bit 15 and ``CL_MASK_0``'s bit 15 will be set(masked),as the event is only meant for Fabric Controller in this example.

4. **Channel Readiness:**
    - If the FC FIFO has available space, then the FC channel is considered ready to accept event.

5. **Valid Signal Assertion:**
    - Because the granted event is unmasked for FC channel and the FIFO is ready to accept the event The event is popped from the internal event queue.
    - It is pushed into the FC FIFO.
    - The first event in the FC FIFO is placed on the ``FIFO`` CSR.

6. **Core Reads Event:**
    - The Fabric Controller reads the event from the FC FIFO through the ``FIFO`` CSR.
    - The event is acknowledged by the Fabric Controller by asserting ``core_irq_ack_i`` and setting ``core_irq_ack_id_i = 11``.
    - The event is then popped from the FC FIFO, and the next event is placed on the ``FIFO`` CSR.


Timer Event Generation
~~~~~~~~~~~~~~~~~~~~~~
  - The event controller includes two timer outputs (timer_event_lo_o and timer_event_hi_o)
  - Each timer output can be programmed to monitor any any of the 169 event sources.
  - The timer source is selected through the TIMER1_SEL_HI and TIMER1_SEL_LO CSRs, by writing the event ID of the desired source.
  - When a timer source is selected, the input event at the chosen event location(event ID) in the combined input event vector is directly driven to the timer output signals.
  - Whatever the value of the selected input sources is, the same is reflected on the timer outputs(timer_event_lo_o and timer_event_hi_o).
  - The timer outputs is consumed by the APB Timer IP, used as input trigger for the timer.
  - The same events are also placed into the input event queues, so that they can be routed to the output channels as well.

System Architecture
-------------------
.. figure:: apb_event_controller_soc_connections.png
   :name: APB_Event_Controller_SoC_Connections
   :align: center
   :alt:

   APB Event Controller CORE-V-MCU connections diagram

Programming View Model
----------------------
The SOC Event Controller is programmed through an APB interface with a 4KB address space. The key programming interfaces include:

Control Flow
~~~~~~~~~~~~
  - Event Generation: Events can be generated from peripherals (160 sources), software (8 sources), or low-speed clock
  - Event Masking: Events can be selectively masked for each output channel using 256-bit mask CSRs
  - Event Routing: Events are arbitrated and routed to the appropriate output channels
  - Error Handling: Event processing errors are detected and reported through error CSRs
  - Timer Control: Two timer event signals can be generated from any event source

Programming Interface
~~~~~~~~~~~~~~~~~~~~~
  - Software Event Generation: Write to EVENT CSR
  - Event Masking: Configure FC_MASK, CL_MASK, and PR_MASK CSRs
  - Event Arbitration: The arbiter resolves concurrent events using a parallel prefix network with round-robin priority
  - Timer Event Selection: Configure TIMER1_SEL_HI and TIMER1_SEL_LO CSRs
  - Error Monitoring: Read ERR CSRs to detect event handling errors
  - Error Clearing: Clear errors by reading from the corresponding ERR CSRs
  - Event FIFO Access: Read from FIFO CSR to retrieve buffered event

APB Event Control CSR
---------------------

Refer to  `Memory Map <https://github.com/openhwgroup/core-v-mcu/blob/master/docs/doc-src/mmap.rst>`_ for peripheral domain address of the APB Event Controller.

The APB Event Controller has a 4KB address space and the CSR interface designed using the APB protocol. There are 24 32-bit CSRs for event masking, 8 CSRs each for FC, CL and PR channels i.e. 256 bits per channel, giving the ability to mask 256 events per channel. 
However, only 169 events are implemented in the current version of the design, Hence only the first 169 bits across the 8 CSRs (from 0th to 5th CSR) of the mask CSRs are functional.
The same applies for the ERR_* CSRs, which are used to report overflow errors for the event queues. The ERR_* CSRs are 32 bits wide and only the first 169 bits across the 8 CSRs (from 0th to 5th CSR) are functional in the current version of the design.

NOTE: Several of the Event Controller CSR are volatile, meaning that their read value may be changed by the hardware.
For example, the ERR_0 CSR will specify if any of queue for event IDs 0-31 have overflow error, these CSRs are not writable and read return the error status and then clear the CSR.
As the name suggests, the value of non-volatile CSRs is not changed by the hardware. These CSRs retain the last value writen by software.
A CSRs volatility is indicated by its "type".

Details of CSR access type are explained `here <https://docs.openhwgroup.org/projects/core-v-mcu/doc-src/mmap.html#csr-access-types>`_.

EVENT    
~~~~~
  - Offset: 0x00
  - Type: non-volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| EVENT            | 7:0  | WO     | 0x00    | 8 bits of software-          |
|                  |      |        |         | generated event.             |
+------------------+------+--------+---------+------------------------------+

FC_MASK_0
~~~~~~~~~
  - Offset: 0x04
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 0-31 of core complex  |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

FC_MASK_1
~~~~~~~~~
  - Offset: 0x08
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 32-63 of core complex |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

FC_MASK_2
~~~~~~~~~
  - Offset: 0x0C
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 64-95 of core complex |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

FC_MASK_3
~~~~~~~~~
  - Offset: 0x10
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 96-127 of core complex|
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

FC_MASK_4
~~~~~~~~~
  - Offset: 0x14
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 128-159 of            |
|                  |      |        |            | core complex (1=mask event). |
+------------------+------+--------+------------+------------------------------+

FC_MASK_5
~~~~~~~~~
  - Offset: 0x18
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 160-191 of            |
|                  |      |        |            | core complex (1=mask event). |
+------------------+------+--------+------------+------------------------------+

FC_MASK_6
~~~~~~~~~
  - Offset: 0x1C
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 192-223 of            |
|                  |      |        |            | core complex (1=mask event). |
+------------------+------+--------+------------+------------------------------+

FC_MASK_7
~~~~~~~~~
  - Offset: 0x20
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 224-255 of            |
|                  |      |        |            | core complex (1=mask event). |
+------------------+------+--------+------------+------------------------------+

CL_MASK_0
~~~~~~~~~
  - Offset: 0x24
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 0-31 of cluster       |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

CL_MASK_1
~~~~~~~~~
  - Offset: 0x28
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 32-63 of cluster      |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

CL_MASK_2
~~~~~~~~~
  - Offset: 0x2C
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 64-95 of cluster      |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

CL_MASK_3
~~~~~~~~~
  - Offset: 0x30
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 96-127 of cluster     |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

CL_MASK_4
~~~~~~~~~
  - Offset: 0x34
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 128-159 of cluster    |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

CL_MASK_5
~~~~~~~~~
  - Offset: 0x38
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 160-191 of cluster    |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

CL_MASK_6
~~~~~~~~~
  - Offset: 0x3C
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 192-223 of cluster    |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

CL_MASK_7
~~~~~~~~~
  - Offset: 0x40
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 224-255 of cluster    |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

PR_MASK_0
~~~~~~~~~
  - Offset: 0x44
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 0-31 of peripheral    |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

PR_MASK_1
~~~~~~~~~
  - Offset: 0x48
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 32-63 of peripheral   |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

PR_MASK_2
~~~~~~~~~
  - Offset: 0x4C
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 64-95 of peripheral   |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

PR_MASK_3
~~~~~~~~~
  - Offset: 0x50
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 96-127 of peripheral  |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

PR_MASK_4
~~~~~~~~~
  - Offset: 0x54
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 128-159 of peripheral |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

PR_MASK_5
~~~~~~~~~
  - Offset: 0x58
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 160-191 of peripheral |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

PR_MASK_6
~~~~~~~~~
  - Offset: 0x5C
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 192-223 of peripheral |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

PR_MASK_7
~~~~~~~~~
  - Offset: 0x60
  - Type: non-volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| MASK             | 31:0 | RW     | 0xFFFFFFFF | Individual masks for         |
|                  |      |        |            | events 224-255 of peripheral |
|                  |      |        |            | (1=mask event).              |
+------------------+------+--------+------------+------------------------------+

ERR_0
~~~~~
  - Offset: 0x64
  - Type: volatile
  
+------------------+------+--------+------------+------------------------------+
| Field            | Bits | Access | Default    | Description                  |
+==================+======+========+============+==============================+
| ERR              | 31:0 | R1C    | 0x00       | Error bits for event queue   |
|                  |      |        |            | overflow for events 0-31.    |
+------------------+------+--------+------------+------------------------------+

ERR_1
~~~~~
  - Offset: 0x68
  - Type: volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| ERR              | 31:0 | R1C    | 0x00    | Error bits for event queue   |
|                  |      |        |         | overflow for events 32-63.   |
+------------------+------+--------+---------+------------------------------+

ERR_2
~~~~~
  - Offset: 0x6C
  - Type: volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| ERR              | 31:0 | R1C    | 0x00    | Error bits for event queue   |
|                  |      |        |         | overflow for events 64-95.   |
+------------------+------+--------+---------+------------------------------+

ERR_3
~~~~~
  - Offset: 0x70
  - Type: volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| ERR              | 31:0 | R1C    | 0x00    | Error bits for event queue   |
|                  |      |        |         | overflow for events 96-127.  |
+------------------+------+--------+---------+------------------------------+

ERR_4
~~~~~
  - Offset: 0x74
  - Type: volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| ERR              | 31:0 | R1C    | 0x00    | Error bits for event queue   |
|                  |      |        |         | overflow for events 128-159. |
+------------------+------+--------+---------+------------------------------+

ERR_5
~~~~~
  - Offset: 0x78
  - Type: volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| ERR              | 31:0 | R1C    | 0x00    | Error bits for event queue   |
|                  |      |        |         | overflow for events 160-191. |
+------------------+------+--------+---------+------------------------------+

ERR_6
~~~~~
  - Offset: 0x7C
  - Type: volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| ERR              | 31:0 | R1C    | 0x00    | Error bits for event queue   |
|                  |      |        |         | overflow for events 192-223. |
+------------------+------+--------+---------+------------------------------+

ERR_7
~~~~~
  - Offset: 0x80
  - Type: volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| ERR              | 31:0 | R1C    | 0x00    | Error bits for event queue   |
|                  |      |        |         | overflow for events 224-255. |
+------------------+------+--------+---------+------------------------------+

TIMER1_SEL_HI
~~~~~~~~~~~~~
  - Offset: 0x84
  - Type: non-volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| SELECT           | 7:0  | RW     | 0x00    | Specifies which event should |
|                  |      |        |         | be routed to the hi timer.   |
+------------------+------+--------+---------+------------------------------+

TIMER1_SEL_LO
~~~~~~~~~~~~~
  - Offset: 0x88
  - Type: non-volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| SELECT           | 7:0  | RW     | 0x00    | Specifies which event should |
|                  |      |        |         | be routed to the lo timer.   |
+------------------+------+--------+---------+------------------------------+

FIFO
~~~~
  - Offset: 0x90
  - Type: volatile
  
+------------------+------+--------+---------+------------------------------+
| Field            | Bits | Access | Default | Description                  |
+==================+======+========+=========+==============================+
| EVENT            | 7:0  | RO     | 0x00    | ID of triggering event for   |
|                  |      |        |         | interrupt handler.           |
+------------------+------+--------+---------+------------------------------+

Firmware Guidelines
-------------------
Follow these steps to properly configure and use the SOC Event Controller IP:

Configuring Peripheral Event Output Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  -Configure Peripheral Event Masks:
      - Write to CSRs PR_MASK_0 through PR_MASK_7 to specify which events should be routed to peripherals.
      - Set mask bits to 0 to enable events, 1 to block events (mask bits are active high).
      - Each CSR controls 32 events, with PR_MASK_0 controlling events 0-31, PR_MASK_1 controlling events 32-63, and so on.

  - Handle Peripheral Event Flow Control:
      - Ensure peripheral components(uDMA subsystem) assert the pr_event_ready_i signal when ready to receive events.
      - Design peripheral drivers to monitor the pr_event_valid_o signal to detect when valid events are present.
      - Read the event ID from pr_event_data_o when a valid event is detected.
      - The event ID corresponds to the position of the granted event in the event vector.

Configuring Cluster Events Output Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Configure Cluster Event Masks:
      - Write to CSRs CL_MASK_0 through CL_MASK_7 to specify which events should be routed to the cluster.
      - Set mask bits to 0 to enable events, 1 to block events (mask bits are active high).
      - Each CSR controls 32 events, with CL_MASK_0 controlling events 0-31, CL_MASK_1 controlling events 32-63, and so on.

  - Manage Cluster Event Flow Control:
      - Ensure that the Cluster(eFPGA) asserts cl_event_ready_i signal to indicate when ready to accept events.
      - Design eFPGA drivers to monitor the cl_event_valid_o signal to detect when valid events are present.
      - Read the event ID from cl_event_data_o when a valid event is detected.
      - The handshake mechanism ensures events are only transmitted when the cluster is ready to receive them.

Configuring Fabric Controller Output Events Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Configure Fabric Controller Event Masks:
      - Write to CSRs FC_MASK_0 through FC_MASK_7 to specify which events should be routed to the Fabric Controller.
      - Set mask bits to 0 to enable events, 1 to block events (mask bits are active high).
      - Each CSR controls 32 events, with FC_MASK_0 controlling events 0-31, FC_MASK_1 controlling events 32-63, and so on.

  - Monitor and Process FC Events through FIFO:
      - Ensure that Fabric Controller monitors the event_fifo_valid_o signal to detect when events are available in the FIFO.
      - Read the event ID from FIFO CSR using the APB interface when an event is available.
      - Acknowledge the event by asserting core_irq_ack_i and setting core_irq_ack_id_i to 11.
      - This acknowledgment mechanism ensures proper event consumption from the FIFO.

  - FIFO Management Considerations:
      - Be aware that the FIFO can store up to 4 events before overflow occurs.
      - Implement a polling or interrupt-driven mechanism to process events promptly.
      - Process events in a timely manner to prevent FIFO overflow conditions.


Configuring Timer Output Event Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Configure Timer Event Sources:
      - Write to TIMER1_SEL_LO with the event index (0-169) that should trigger the timer low signal.
      - Write to TIMER1_SEL_HI with the event index (0-169) that should trigger the timer high signal.
      - These configurations determine which events will control the timer's behavior.

  - Valid Event Range:
      - Ensure that the event indices used for timer configuration are within the valid range of 0-169.
      - The event indices correspond to the following:
        - Peripheral events (0-159): 160 events
        - APB events (160-167): 8 events
        - Low-speed clock event (168): 1 event
      - Ensure that only valid event indices are used when configuring timer sources.

Handling Errors
~~~~~~~~~~~~~~~

  - Initialize Error Handling:
      - Clear any pending errors during initialization.
      - Read from ERR_0 through ERR_7 to clear existing error flags.
      - This ensures a clean state before beginning normal operation.

  - Monitor for Errors:
      - Monitor the err_event_o signal to detect queue overflow errors.
      - When err_event_o is high, check ERR_0 through ERR_7 for set error bits.
      - Each bit corresponds to an event source that experienced a queue overflow.
      - Regular monitoring helps detect and address errors before they cause system issues.

  - Error Recovery Process:
      - Clear errors by reading from the corresponding ERR CSR.
      - Implement appropriate error recovery mechanisms based on which events had overflow errors.

Pin Description
---------------
.. figure:: apb_event_controller_pin_diagram.png
   :name: APB_Event_Controller_Pin_Diagram
   :align: center
   :alt:

   APB Event Controller Pin Diagram

Clock and Reset
~~~~~~~~~~~~~~~
  - HCLK: APB clock input; provided by APB FLL
  - HRESETn: Active low reset signal

APB Interface
~~~~~~~~~~~~~
  - PADDR[11:0]: APB address bus input
  - PWDATA[31:0]:  APB write data bus input
  - PWRITE: APB write control input (high for write, low for read)
  - PSEL: APB peripheral select input
  - PENABLE: APB enable input
  - PRDATA: APB write data bus input
  - PREADY: APB ready output to indicate transfer completion
  - PSLVERR: APB error response output signal

Input Event Interface
~~~~~~~~~~~~~~~~~~~~~
  - per_events_i[159:0]: Peripheral event inputs; generated by various peripherals in the system - uDMA subsystem([111:0]), eFPGA cluster([127:112]), GPIO([159:128])
  - low_speed_clk_i: Low-speed clock event input; provided by APB FLL.

Peripheral Event Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~
  - pr_event_valid_o: Peripheral event valid output
  - pr_event_data_o[7:0]: Peripheral event data output, indicating the event ID
  - pr_event_ready_i: Peripheral event ready input, indicating readiness to process the event

Fabric Controller Event Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  - fc_events_o[1:0]: Fabric control event output, directly connected to per_events_i[8:7] (Not connected in current implementation).
  - core_irq_ack_id_i[4:0]: Core interrupt acknowledge ID input; provided by the Fabric Controller
  - core_irq_ack_i:  Core interrupt acknowledge input; provided by the Fabric Controller
  - event_fifo_valid_o: Event FIFO valid output, indicating the presence of an event in the FIFO; connected to Fabric Controller
  - err_event_o: Error event output, indicating queue overflow for any of the input events; connected to Fabric Controller

Cluster Event Interface
~~~~~~~~~~~~~~~~~~~~~~~
  - cl_event_valid_o: Cluster event valid output (Not connected in current implementation).
  - cl_event_data_o[7:0]: Cluster event data output, indicating the event ID (Not connected in current implementation).
  - cl_event_ready_i: Cluster event ready input, indicating readiness to process the event (Not connected in current implementation).

Timer Event Interface
~~~~~~~~~~~~~~~~~~~~~
  - timer_event_lo_o: Timer event low output; connected to APB Timer IP
  - timer_event_hi_o: Timer event high output; connected to APB Timer IP

